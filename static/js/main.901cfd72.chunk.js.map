{"version":3,"sources":["logo.svg","components/Data.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Data","id","selected","name","device","path","status","isAvailable","TableComponent","props","state","List","MasterChecked","e","tempList","this","map","data","target","checked","totalCheckedItems","filter","length","selectedheader","document","querySelector","indeterminate","innerHTML","setState","item","totalItems","querySelectorAll","CheckedItems","results","forEach","element","push","alert","join","className","type","onChange","onMasterCheck","onClick","onDownload","onItemCheck","React","Component","App","Table","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.901cfd72.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const Data = [{\n    id: 1,\n    selected: false,\n    name: 'smss.exe',\n    device: 'Stark',\n    path: '\\\\Device\\\\HarddiskVolume2\\\\Windows\\\\System32\\\\smss.exe',\n    status: 'scheduled',\n    isAvailable: false\n  },\n  {\n    id: 2,\n    selected: false,\n    name: 'netsh.exe',\n    device: 'Targaryen',\n    path: '\\\\Device\\\\HarddiskVolume2\\\\Windows\\\\System32\\\\netsh.exe',\n    status: 'available',\n    isAvailable: true\n  },\n  {\n    id: 3,\n    selected: false,\n    name: \"Clementine Bauch\",\n    name: 'uxtheme.dll',\n    device: 'Lannister',\n    path: '\\\\Device\\\\HarddiskVolume1\\\\Windows\\\\System32\\\\uxtheme.dll',\n    status: 'available',\n    isAvailable: true\n  },\n  {\n    id: 4,\n    selected: false,\n    name: 'cryptbase.dll',\n    device: 'Martell',\n    path: '\\\\Device\\\\HarddiskVolume1\\\\Windows\\\\System32\\\\cryptbase.dll',\n    status: 'scheduled',\n    isAvailable: false\n  },\n  {\n    id: 5,\n    selected: false,\n    name: '7za.exe',\n    device: 'Baratheon',\n    path: '\\\\Device\\\\HarddiskVolume1\\\\temp\\\\7za.exe',\n    status: 'scheduled',\n    isAvailable: false\n  },\n];","import React from 'react'\nimport './table.css'\nimport {Data} from './Data'\nimport { AiOutlineDownload } from 'react-icons/ai'\n\n/**\n\nRequirements:\n\n-- Only those that have a status of \"available\" are currently able to be downloaded. Your implementation should manage this.\n-- The select-all checkbox should be in an unselected state if no items are selected.\n-- The select-all checkbox should be in a selected state if all items are selected.\n-- The select-all checkbox should be in an indeterminate state if some but not all items are selected.\n-- The \"Selected 2\" text should reflect the count of selected items and display \"None Selected\" when there are none selected.\n-- Clicking the select-all checkbox should select all items if none or some are selected.\n-- Clicking the select-all checkbox should deselect all items if all are currently selected.\n-- Status should be correctly formatted\n-- Clicking \"Download Selected\" when some or all items are displayed should generate an alert box with the path and device of all selected files. \n-- Precise/exact HTML formatting/styling to match the mockup is not required however rows should change colour when selected and on hover.\n\n**/\n\nclass TableComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      List: Data,\n      MasterChecked: false\n    };\n  }\n\n  // Select/Deselect  rows\n\n  onMasterCheck(e) {\n    let tempList = this.state.List;\n    // Check/ UnCheck All Items\n    tempList.map((data) => (data.selected = e.target.checked));\n\n    const totalCheckedItems = tempList.filter((e) => e.selected).length;\n    //Update Selected Header\n    let selectedheader = document.querySelector('.header .showselected');\n    document.querySelector(\".mastercheckbox\").indeterminate = false;\n\n    selectedheader.innerHTML = `Selected ${totalCheckedItems}`\n    if (totalCheckedItems < 1) {\n      selectedheader.innerHTML = `None Selected`\n    }\n\n    //Update State\n    this.setState({\n      MasterChecked: e.target.checked,\n      List: tempList\n    });\n  }\n\n\n  // Update List Item's state and Master Checkbox State\n  onItemCheck(e, item) {\n    let tempList = this.state.List;\n    tempList.map((data) => {\n      if (data.id === item.id) {\n        data.selected = e.target.checked;\n      }\n      return data;\n    });\n\n    //Master Checkbox State\n    const totalItems = this.state.List.length;\n    const totalCheckedItems = tempList.filter((e) => e.selected).length;    \n\n    //Update Selected Count in the Header\n    let selectedheader = document.querySelector('.header .showselected');\n    selectedheader.innerHTML = `Selected ${totalCheckedItems}`\n    document.querySelector(\".mastercheckbox\").indeterminate = true;\n    \n    if (totalCheckedItems < 1) {\n      selectedheader.innerHTML = `None Selected`\n      document.querySelector(\".mastercheckbox\").indeterminate = false;\n    }\n\n    // remove indeterminate if all have been manually selected\n    let totalcheckbox = document.querySelectorAll('input').length;\n    if (totalCheckedItems === totalcheckbox - 1) {\n      document.querySelector(\".mastercheckbox\").indeterminate = false;\n    }\n    \n    // Update State\n    this.setState({\n      MasterChecked: totalItems === totalCheckedItems,\n      List: tempList\n    });\n\n  }\n\n  //Alert available elements when Download is clicked\n  onDownload(){\n    let tempList = this.state.List;\n    let CheckedItems = tempList.filter((e) => e.selected);\n    let results = [];\n    CheckedItems.forEach((element) => {\n      if (element.status === 'available'){\n        results.push(element.device);\n        results.push(element.path);\n      }\n    })\n    if (results.length == 0 ){\n      alert(\"No file available for download\")\n    } else{\n      alert(results.join('\\n'))\n    }\n     // Update State\n     this.setState({\n       List: tempList\n     });\n  }\n \n //RENDER HTML\n\n  render() {\n    return ( \n    <div>\n      \n        <div className=\"header\">\n          <div className=\"header-elements\">\n            <input \n            type = \"checkbox\"\n            className=\"mastercheckbox\"\n            checked = {this.state.MasterChecked} \n            onChange = {(e) => this.onMasterCheck(e) }/> \n          </div>\n          <div className=\"header-elements showselected\">None Selected</div>\n          <div className=\"header-elements\" onClick={(e) => this.onDownload()}>\n            <AiOutlineDownload />   Download Selected</div>\n        </div>\n            \n        <div>\n          <table className=\"table-container\">\n            <thead>\n              <tr>\n                <th></th> \n                <th>Name</th> \n                <th>Device</th> \n                <th>Path</th> \n                <th>Download</th>\n                <th>Status</th> \n              </tr> \n            </thead> \n            \n            <tbody className=\"table-body\"> \n              {this.state.List.map((data) => ( \n                  <tr key = {data.id} className = {data.selected ? \"selected\" : \"\"}>\n                    <th>\n                      <input type = \"checkbox\"\n                        checked = {data.selected}\n                        onChange = {(e) => this.onItemCheck(e, data)}/> \n                    </th> \n                    <td>{data.name}</td> \n                    <td> {data.device}</td> \n                    <td>{data.path} </td> \n                    <td className={`${data.isAvailable ? \"available\" : \"notavailable\"}`}></td>\n                    <td>{data.status}</td> \n                  </tr>\n                  )\n                )\n              } \n            </tbody> \n         </table> \n        </div> \n\n        \n      </div>\n    );\n  }\n}\n\nexport default TableComponent;","import logo from './logo.svg';\nimport './App.css';\nimport TableComponent from \"./components/Table.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableComponent />\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}