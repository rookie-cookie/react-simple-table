{"version":3,"sources":["components/Data.js","components/GenericTable.tsx","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Data","id","selected","name","device","path","status","isAvailable","GenericTable","tableHeaders","tableArray","push","remove","selectedItems","className","map","header","idx","tdata","onChangeCallback","e","target","checked","index","x","indexOf","checkedStatus","includes","InputCheckBox","inputClassName","type","onChange","TableComponent","initialValues","onSubmit","values","alertMessage","length","alert","join","handleAlertOnSubmit","handleChange","handleSubmit","fieldArrayProps","form","document","querySelector","indeterminate","filter","onClick","App","Table","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2d606cb1.chunk.js","sourcesContent":["export const Data = [{\n    id: 1,\n    selected: false,\n    name: 'smss.exe',\n    device: 'Stark',\n    path: '\\\\Device\\\\HarddiskVolume2\\\\Windows\\\\System32\\\\smss.exe',\n    status: 'scheduled',\n    isAvailable: false\n  },\n  {\n    id: 2,\n    selected: false,\n    name: 'netsh.exe',\n    device: 'Targaryen',\n    path: '\\\\Device\\\\HarddiskVolume2\\\\Windows\\\\System32\\\\netsh.exe',\n    status: 'available',\n    isAvailable: true\n  },\n  {\n    id: 3,\n    selected: false,\n    name: 'uxtheme.dll',\n    device: 'Lannister',\n    path: '\\\\Device\\\\HarddiskVolume1\\\\Windows\\\\System32\\\\uxtheme.dll',\n    status: 'available',\n    isAvailable: true\n  },\n  {\n    id: 4,\n    selected: false,\n    name: 'cryptbase.dll',\n    device: 'Martell',\n    path: '\\\\Device\\\\HarddiskVolume1\\\\Windows\\\\System32\\\\cryptbase.dll',\n    status: 'scheduled',\n    isAvailable: false\n  },\n  {\n    id: 5,\n    selected: false,\n    name: '7za.exe',\n    device: 'Baratheon',\n    path: '\\\\Device\\\\HarddiskVolume1\\\\temp\\\\7za.exe',\n    status: 'scheduled',\n    isAvailable: false\n  },\n];","import React from 'react'\n\ntype tableData = {\n  id: number,\n  selected: boolean,\n  name: string,\n  device: string,\n  path: string,\n  status: string,\n  isAvailable: boolean\n}\n\ntype GenericTableProps = {\n  tableArray: tableData[],\n  tableHeaders: string[],\n  push: (obj: any) => void\n  remove: (obj: any) => void\n  selectedItems: tableData[]\n}\n\n/**\n * Returns a simple table with checkbox for selection\n * @param tableHeaders - header for the table\n * @param tableArray - contains table data \n * @param push - formik's array helper function to push data to array \n * @param remove - formik's array helper function to remove data from array\n * @param selectedItems - all selected items \n */\nconst GenericTable = ({ tableHeaders, tableArray, push, remove, selectedItems }: GenericTableProps) => {\n\n  return (\n    <div>\n      <table className=\"table-container\">\n        <thead>\n          <tr>\n            {tableHeaders.map((header,idx) => {\n              return (\n              <th key={idx}>{header}</th>\n              )\n            })}\n          </tr>\n        </thead>\n\n        <tbody className=\"table-body\">\n          {tableArray.map((tdata,idx) => {\n            return (\n              <tr key={tdata.id} className={tdata.selected ? \"selected\" : \"\"}>\n                <td>\n                  <InputCheckBox \n                    onChangeCallback={(e) => {\n                      if (e.target.checked) {\n                        tableArray[idx].selected = true\n                        push({\n                          ...tdata,\n                          selected: true\n                        })\n                      } else {\n                        tableArray[idx].selected = false\n                        const index = selectedItems.map(x => x.id).indexOf(tdata.id)\n                        remove(index)\n                      }\n                    }}\n                    checkedStatus={selectedItems.map(x => x.id).includes(tdata.id)}\n                  />\n                </td>\n                <td>{tdata.name}</td>\n                <td> {tdata.device}</td>\n                <td>{tdata.path} </td>\n                <td className={`${tdata.isAvailable ? \"available\" : \"notavailable\"}`}></td>\n                <td>{tdata.status}</td>\n              </tr>\n            )\n          })}\n          \n        </tbody> \n      </table>\n\n    </div>\n  )\n}\n\nexport default GenericTable\n\n\n\ntype InputCheckBoxProps = { \n  onChangeCallback?: (e: any) => void, \n  inputClassName?: string,\n  checkedStatus?: boolean\n}\n/**\n * Return input type checkbox component\n * @param param0 \n */\nexport const InputCheckBox = ({ onChangeCallback, inputClassName, checkedStatus}: InputCheckBoxProps) => {\n  return (\n    <input className={inputClassName} type=\"checkbox\" onChange={onChangeCallback} checked={checkedStatus} />\n  )\n}","import React from 'react'\nimport './table.css'\nimport {Data} from './Data'\nimport { AiOutlineDownload } from 'react-icons/ai'\nimport GenericTable from './GenericTable'\nimport { Formik, Form, FieldArray } from 'formik';\nimport {InputCheckBox} from './GenericTable'\n\n/**\n\nRequirements:\n\n-- Only those that have a status of \"available\" are currently able to be downloaded. Your implementation should manage this.\n-- The select-all checkbox should be in an unselected state if no items are selected.\n-- The select-all checkbox should be in a selected state if all items are selected.\n-- The select-all checkbox should be in an indeterminate state if some but not all items are selected.\n-- The \"Selected 2\" text should reflect the count of selected items and display \"None Selected\" when there are none selected.\n-- Clicking the select-all checkbox should select all items if none or some are selected.\n-- Clicking the select-all checkbox should deselect all items if all are currently selected.\n-- Status should be correctly formatted\n-- Clicking \"Download Selected\" when some or all items are displayed should generate an alert box with the path and device of all selected files. \n-- Precise/exact HTML formatting/styling to match the mockup is not required however rows should change colour when selected and on hover.\n\n**/\n\nconst TableComponent = () => {\n\n  const handleAlertOnSubmit = (values) => {\n    let alertMessage = []\n    for (let selected of values.selectedItems) {\n      if (selected.status === \"available\") {\n        alertMessage.push(selected.device)\n        alertMessage.push(selected.path)\n      }\n    }\n    if (alertMessage.length === 0) {\n      alert(\"No file available for download.\")\n    } else {\n      alert(alertMessage.join('\\n'))\n    }\n  }\n\n  return (\n    <>\n      <Formik\n        initialValues={{selectedItems: []}}\n        onSubmit={values => {handleAlertOnSubmit(values)}} \n      >\n        {({\n          handleChange,\n          handleSubmit,\n          values\n        }) => (\n          <Form>\n           <FieldArray name=\"selectedItems\">\n             {\n               fieldArrayProps => {\n                 const {push, remove, form} = fieldArrayProps\n                 const {values: {selectedItems}} = form\n                 \n                 if (selectedItems.length > 0 && selectedItems.length < Data.length){\n                   document.querySelector(\".mastercheckbox\").indeterminate = true\n                 }\n              \n                 return (\n                   <>\n                    <div className=\"header\">\n                      <div className=\"header-elements\">\n                        <InputCheckBox \n                          inputClassName={\"mastercheckbox\"}\n                          onChangeCallback={(e) => {\n                            if (e.target.checked){\n                              Data.filter(tdata => !(selectedItems.map(x => x.id).includes(tdata.id))).map(x => push({\n                                ...x,\n                                selected: true \n                              }))\n                            } else {\n                              Data.map(x => remove({\n                                ...x,\n                                selected: false\n                              }))\n                            }\n                          }}\n                        />\n                      </div>\n                        <div className=\"header-elements showselected\">{selectedItems.length === 0 ? \"None Selected\" : <span>Selected: {selectedItems.length}</span> }</div>\n                      <div className=\"header-elements\" onClick={handleSubmit}><AiOutlineDownload /> Download Selected</div>\n                    </div>\n\n                    <GenericTable \n                      tableHeaders = {[\"\", \"Name\", \"Device\", \"Path\", \"Download\", \"Status\"]} \n                      tableArray={Data} \n                      push={push}\n                      remove={remove}\n                      selectedItems={selectedItems}\n                    />\n                   \n                   </>\n                 )\n               }\n             }\n           </FieldArray>\n         </Form>\n        )}\n\n      </Formik>\n\n    </>\n  )\n}\n\n// CLASS COMPONENT\n\n// class TableComponent extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       List: Data,\n//       MasterChecked: false\n//     };\n//   }\n\n//   // Select/Deselect  rows\n\n//   onMasterCheck(e) {\n//     let tempList = this.state.List;\n//     // Check/ UnCheck All Items\n//     tempList.map((data) => (data.selected = e.target.checked));\n\n//     const totalCheckedItems = tempList.filter((e) => e.selected).length;\n//     //Update Selected Header\n//     let selectedheader = document.querySelector('.header .showselected');\n//     document.querySelector(\".mastercheckbox\").indeterminate = false;\n\n//     selectedheader.innerHTML = `Selected ${totalCheckedItems}`\n//     if (totalCheckedItems < 1) {\n//       selectedheader.innerHTML = `None Selected`\n//     }\n\n//     //Update State\n//     this.setState({\n//       MasterChecked: e.target.checked,\n//       List: tempList\n//     });\n//   }\n\n\n//   // Update List Item's state and Master Checkbox State\n//   onItemCheck(e, item) {\n//     let tempList = this.state.List;\n//     tempList.map((data) => {\n//       if (data.id === item.id) {\n//         data.selected = e.target.checked;\n//       }\n//       return data;\n//     });\n\n//     //Master Checkbox State\n//     const totalItems = this.state.List.length;\n//     const totalCheckedItems = tempList.filter((e) => e.selected).length;    \n\n//     //Update Selected Count in the Header\n//     let selectedheader = document.querySelector('.header .showselected');\n//     selectedheader.innerHTML = `Selected ${totalCheckedItems}`\n//     document.querySelector(\".mastercheckbox\").indeterminate = true;\n    \n//     if (totalCheckedItems < 1) {\n//       selectedheader.innerHTML = `None Selected`\n//       document.querySelector(\".mastercheckbox\").indeterminate = false;\n//     }\n\n//     // remove indeterminate if all have been manually selected\n//     let totalcheckbox = document.querySelectorAll('input').length;\n//     if (totalCheckedItems === totalcheckbox - 1) {\n//       document.querySelector(\".mastercheckbox\").indeterminate = false;\n//     }\n    \n//     // Update State\n//     this.setState({\n//       MasterChecked: totalItems === totalCheckedItems,\n//       List: tempList\n//     });\n\n//   }\n\n//   //Alert available elements when Download is clicked\n//   onDownload(){\n//     let tempList = this.state.List;\n//     let CheckedItems = tempList.filter((e) => e.selected);\n//     let results = [];\n//     CheckedItems.forEach((element) => {\n//       if (element.status === 'available'){\n//         results.push(element.device);\n//         results.push(element.path);\n//       }\n//     })\n//     if (results.length === 0 ){\n//       alert(\"No file available for download\")\n//     } else{\n//       alert(results.join('\\n'))\n//     }\n//      // Update State\n//      this.setState({\n//        List: tempList\n//      });\n//   }\n \n//  //RENDER HTML\n\n//   render() {\n//     return ( \n//     <div>\n        \n\n//         <div className=\"header\">\n//           <div className=\"header-elements\">\n//             <input \n//             type = \"checkbox\"\n//             className=\"mastercheckbox\"\n//             checked = {this.state.MasterChecked} \n//             onChange = {(e) => this.onMasterCheck(e) }/> \n//           </div>\n//           <div className=\"header-elements showselected\">None Selected</div>\n//           <div className=\"header-elements\" onClick={(e) => this.onDownload()}>\n//             <AiOutlineDownload />   Download Selected</div>\n//         </div>\n            \n        \n//         <div>\n//           <table className=\"table-container\">\n//             <thead>\n//               <tr>\n//                 <th></th> \n//                 <th>Name</th> \n//                 <th>Device</th> \n//                 <th>Path</th> \n//                 <th>Download</th>\n//                 <th>Status</th> \n//               </tr> \n//             </thead> \n            \n//             <tbody className=\"table-body\"> \n//               {this.state.List.map((data) => ( \n//                   <tr key = {data.id} className = {data.selected ? \"selected\" : \"\"}>\n//                     <th>\n//                       <input type = \"checkbox\"\n//                         checked = {data.selected}\n//                         onChange = {(e) => this.onItemCheck(e, data)}/> \n//                     </th> \n//                     <td>{data.name}</td> \n//                     <td> {data.device}</td> \n//                     <td>{data.path} </td> \n//                     <td className={`${data.isAvailable ? \"available\" : \"notavailable\"}`}></td>\n//                     <td>{data.status}</td> \n//                   </tr>\n//                   )\n//                 )\n//               } \n//             </tbody> \n//          </table> \n//         </div> \n\n        \n//       </div>\n//     );\n//   }\n// }\n\nexport default TableComponent;","import './App.css';\nimport TableComponent from \"./components/Table.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableComponent />\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}